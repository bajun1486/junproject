import axios from "axios";
import React, { useCallback, useEffect, useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import RecruitmentSidebar from "../MainPage/RecruitmentSidebar";
import WorkboardPagination from "./WorkBoardPagination"; // WorkboardPagination Ïª¥Ìè¨ÎÑåÌä∏ ÏûÑÌè¨Ìä∏
import "./WorkBoard.css"; // CSS ÌååÏùº
import Graystar from "../img/Graystar.png"; // ÎπÑÏ¶êÍ≤®Ï∞æÍ∏∞ Ïù¥ÎØ∏ÏßÄ
import Goldstar from "../img/Goldstar.png"; // Ï¶êÍ≤®Ï∞æÍ∏∞ Ïù¥ÎØ∏ÏßÄ
import { LoginContext } from "../../login/security/contexts/LoginContextProvider";

function WorkBoard() {
    const navigate = useNavigate();
    const [searchResult, setSearchResult] = useState([]); // Ï¥àÍ∏∞ ÏÉÅÌÉúÎ•º Îπà Î∞∞Ïó¥Î°ú ÏÑ§Ï†ï
    const [searchOption, setSearchOption] = useState({
        startDate: "",
        endDate: "",
        region: "",
        searchQuery: "",
    });

    // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
    const [currentPage, setCurrentPage] = useState(1);
    const [totalBoardCount, setTotalBoardCount] = useState(0);
    const [boardsPerPage, setBoardsPerPage] = useState(30); // Í∏∞Î≥∏ 30Í∞ú

    function convertToYYYYMMDD(dateString) {
        const [year, month, day] = dateString.split("-");
        return `${year}${month}${day}`;
    }

    // üîπ API Ìò∏Ï∂ú (Í≤ÄÏÉâ Í∏∞Îä•)
    const fetchWorkBoards = useCallback((page) => {
        const params = {
            returnType: "XML", // üîπ XML ÎåÄÏã† JSONÏúºÎ°ú ÏöîÏ≤≠
            callTp: "L",
            startPage: page,
            display: boardsPerPage,
        };

        if (searchOption.startDate) {
            params.srchBgnDt = convertToYYYYMMDD(searchOption.startDate); // YYYY-MM-DD -> YYYYMMDD Î≥ÄÌôò
        }
        if (searchOption.endDate) {
            params.srchEndDt = convertToYYYYMMDD(searchOption.endDate); // YYYY-MM-DD -> YYYYMMDD Î≥ÄÌôò
        }
        if (searchOption.region) {
            params.areaCd = searchOption.region;
        }
        if (searchOption.searchQuery) {
            params.keyword = searchOption.searchQuery;
        }
        console.log("üìå ÏöîÏ≤≠ Îß§Í∞úÎ≥ÄÏàò:", params); // ÏöîÏ≤≠ Îß§Í∞úÎ≥ÄÏàò Î°úÍ∑∏ Ï∂úÎ†•

        axios.get('http://localhost:8090/api/work/board/search', { params })
            .then((response) => {
                console.log("üìå Ï†ÑÏ≤¥ API ÏùëÎãµ:", response); // Ï†ÑÏ≤¥ ÏùëÎãµ Î°úÍ∑∏ Ï∂úÎ†•
                console.log("üìå API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", response.data); // ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
                setSearchResult(response.data); // Í≤ÄÏÉâ Í≤∞Í≥º ÏÉÅÌÉú ÏÑ§Ï†ï
                setTotalBoardCount(response.data.totalCount); // Ï¥ù Í≤åÏãúÎ¨º Ïàò ÏÑ§Ï†ï
            })
            .catch((error) => {
                console.error("‚ùå API ÏöîÏ≤≠ Ïò§Î•ò:", error);
            });
    }, [searchOption, boardsPerPage]);

    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ï≤òÏùå ÎßàÏö¥Ìä∏Îê† Îïå API Ìò∏Ï∂ú
    useEffect(() => {
        fetchWorkBoards(currentPage); // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Ìò∏Ï∂ú
    }, [currentPage, fetchWorkBoards]);

    useEffect(() => {
        console.log("üéØ Í≤ÄÏÉâ Í≤∞Í≥º:", searchResult);
    }, [searchResult]);

    // üîπ ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Ïù¥Îèô
    const onDetail = (workBoard) => {
        const eventNo = workBoard.eventNo; // workBoardÏóêÏÑú eventNo Í∞ÄÏ†∏Ïò§Í∏∞
        const areaCd = workBoard.areaCd;

        console.log("üîç eventNo:", eventNo, "areaCd:", areaCd);

        navigate(`/work_board/WorkBoardDetail/${eventNo}?areaCd=${areaCd}`); // URL ÌååÎùºÎØ∏ÌÑ∞Î°ú eventNo Ï†ÑÎã¨
    };

    // üîπ Í≤ÄÏÉâ Ï°∞Í±¥ Î≥ÄÍ≤Ω Ï≤òÎ¶¨
    const handleOnChange = (e) => {
        const { name, value } = e.target;
        setSearchOption((prevState) => ({
            ...prevState,
            [name]: value,
        }));
    };

    // üîπ ÎÇ†Ïßú Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÏÑ§Ï†ï
    const setDateRange = (days) => {
        const today = new Date();
        let startDate = new Date();
        let endDate = new Date();

        switch (days) {
            case "today":
                endDate = new Date(today);
                break;
            case "1week":
                endDate.setDate(today.getDate() + 7);
                break;
            case "1month":
                endDate.setMonth(today.getMonth() + 1);
                break;
            case "3months":
                endDate.setMonth(today.getMonth() + 3);
                break;
            case "6months":
                endDate.setMonth(today.getMonth() + 6);
                break;
            default:
                break;
        }

        setSearchOption((prevState) => ({
            ...prevState,
            startDate: startDate.toISOString().split("T")[0], // YYYY-MM-DD ÌòïÏãù
            endDate: endDate.toISOString().split("T")[0], // YYYY-MM-DD ÌòïÏãù
        }));
    };

    // üîπ Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ìò∏Ï∂ú
    const handleSearch = () => {
        setCurrentPage(1); // Í≤ÄÏÉâ Ïãú Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ï¥àÍ∏∞Ìôî
        fetchWorkBoards(1); // Í≤ÄÏÉâ Í≤∞Í≥ºÎ•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò Ìò∏Ï∂ú
    };

    // Ï¥ù ÌéòÏù¥ÏßÄ Ïàò Í≥ÑÏÇ∞
    const totalPages = Math.ceil(totalBoardCount / boardsPerPage);
    const validTotalPages = totalPages > 0 ? totalPages : 1; // 0 Ïù¥ÌïòÏùº Í≤ΩÏö∞ Í∏∞Î≥∏Í∞í 1

    const { isLogin } = useContext(LoginContext); // ‚úÖ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞
    const [favorites, setFavorites] = useState({}); // ‚úÖ Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú Í¥ÄÎ¶¨

    // ‚úÖ ÏÇ¨Ïö©ÏûêÏùò Ï¶êÍ≤®Ï∞æÍ∏∞ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    const fetchFavorites = useCallback(() => {
        const token = localStorage.getItem("accessToken");
        if (!token) return;

        axios.get("http://localhost:8090/api/work-favorites", {
            headers: { Authorization: `Bearer ${token}` },
        })
            .then((response) => {
                const favoriteIds = response.data; // eventNo Î™©Î°ù
                const favoriteMap = favoriteIds.reduce((acc, eventNo) => {
                    acc[eventNo] = true;  // ‚úÖ Ï¶êÍ≤®Ï∞æÍ∏∞Ìïú eventNoÎ•º trueÎ°ú ÏÑ§Ï†ï
                    return acc;
                }, {});
                setFavorites(favoriteMap);
            })
            .catch((error) => {
                console.error("‚ùå Ï¶êÍ≤®Ï∞æÍ∏∞ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò:", error);
            });
    }, []);

    useEffect(() => {
        fetchFavorites();
    }, [fetchFavorites]);

    // ‚úÖ Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞Ä/ÏÇ≠Ï†ú Í∏∞Îä•
    const toggleFavorite = (eventNo) => {
        if (!isLogin) {
            alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§!");
            return;
        }

        const isFavorite = favorites[eventNo];
        const token = localStorage.getItem("accessToken");

        if (!token) {
            alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§!");
            return;
        }

        const headers = {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
        };

        if (isFavorite) {
            axios.delete(`http://localhost:8090/api/work-favorites/${eventNo}`, { headers })
                .then(() => {
                    setFavorites(prevFavorites => ({ ...prevFavorites, [eventNo]: false }));
                    alert("Ï¶êÍ≤®Ï∞æÍ∏∞ÏóêÏÑú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!");
                })
                .catch((error) => {
                    console.error("Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
                });
        } else {
            axios.post(`http://localhost:8090/api/work-favorites/${eventNo}`, {}, { headers })
                .then(() => {
                    setFavorites(prevFavorites => ({ ...prevFavorites, [eventNo]: true }));
                    alert("Ï¶êÍ≤®Ï∞æÍ∏∞Ïóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!");
                })
                .catch((error) => {
                    console.error("Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞Ä Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
                });
        }
    };

    return (
        <div className="workboard-board-with-sidebar">
            <RecruitmentSidebar />
            <div className="workboard-board-content-area">
                <section className="workboard-board-list">
                    <div id="search">
                        <div className="workboard-b-container">
                            <h3 className="workboard-title">Í≥†Ïö©24 ÌõàÎ†® Î∞è Ï±ÑÏö©Í≤ÄÏÉâ</h3>

                            {/* ÌñâÏÇ¨Í∏∞Í∞Ñ ÏûÖÎ†• ÌïÑÎìú */}
                            <table className="event-table">
                                <tbody>
                                    <tr>
                                        <td>ÌñâÏÇ¨Í∏∞Í∞Ñ</td>
                                        <td>
                                            <input type="date" name="startDate" value={searchOption.startDate} onChange={handleOnChange} />
                                            <span> ~ </span>
                                            <input type="date" name="endDate" value={searchOption.endDate} onChange={handleOnChange} />
                                            <div className="button-container">
                                                <button className="workboard-button" onClick={() => setDateRange("today")}>Ïò§Îäò</button>
                                                <button className="workboard-button" onClick={() => setDateRange("1week")}>1Ï£ºÏùº</button>
                                                <button className="workboard-button" onClick={() => setDateRange("1month")}>1Í∞úÏõî</button>
                                                <button className="workboard-button" onClick={() => setDateRange("3months")}>3Í∞úÏõî</button>
                                                <button className="workboard-button" onClick={() => setDateRange("6months")}>6Í∞úÏõî</button>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>

                            {/* ÏßÄÏó≠ ÏÑ†ÌÉù */}
                            <table className="search-table">
                                <tbody>
                                    <tr>
                                        <td>ÏßÄÏó≠</td>
                                        <td>
                                            <select name="region" value={searchOption.region} onChange={handleOnChange}>
                                                <option value="">Ï†ÑÏ≤¥</option>
                                                <option value="51">ÏÑúÏö∏, Í∞ïÏõê</option>
                                                <option value="52">Î∂ÄÏÇ∞, Í≤ΩÎÇ®</option>
                                                <option value="53">ÎåÄÍµ¨, Í≤ΩÎ∂Å</option>
                                                <option value="54">Í≤ΩÍ∏∞, Ïù∏Ï≤ú</option>
                                                <option value="55">Í¥ëÏ£º, Ï†ÑÎùº, Ï†úÏ£º</option>
                                                <option value="56">ÎåÄÏ†Ñ, Ï∂©Ï≤≠</option>
                                            </select>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Í≤ÄÏÉâÏñ¥</td>
                                        <td>
                                            <input
                                                type="text"
                                                name="searchQuery"
                                                value={searchOption.searchQuery}
                                                onChange={handleOnChange}
                                            />
                                            <button className="workboard-button" onClick={handleSearch}>Í≤ÄÏÉâ</button>

                                            {/* Î≥¥Ïó¨Ï§Ñ Í∞úÏàò ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ Ï∂îÍ∞Ä */}
                                            <select className="workboard-button-dropdown" value={boardsPerPage} onChange={(e) => {
                                                setBoardsPerPage(Number(e.target.value));
                                                setCurrentPage(1); // ÌéòÏù¥ÏßÄÎ•º Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ï¥àÍ∏∞Ìôî
                                            }}>
                                                <option value="10">10Í∞ú Ï†ÅÏö©</option>
                                                <option value="20">20Í∞ú Ï†ÅÏö©</option>
                                                <option value="30">30Í∞ú Ï†ÅÏö©</option>
                                                <option value="50">50Í∞ú Ï†ÅÏö©</option>
                                            </select>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>

                        </div>
                    </div>

                    {/* Í≤ÄÏÉâ Í≤∞Í≥º Î™©Î°ù */}
                    <div className="workboard-b-list">
                        {searchResult && searchResult.length > 0 ? (
                            searchResult.map((workBoard) => (
                                <div className="workboard-card" key={workBoard.eventNo}>
                                    {/* ‚úÖ Ï†úÎ™©ÏóêÎßå ÏÉÅÏÑ∏Î≥¥Í∏∞ Ï†ÅÏö© */}
                                    <h4 onClick={() => onDetail(workBoard)} style={{ cursor: "pointer", textDecoration: "underline" }}>
                                        {workBoard.title}
                                    </h4>

                                    <p>{workBoard.eventTerm}</p>
                                    <p>{workBoard.startDate} ~ {workBoard.endDate}</p>
                                    <p>{workBoard.area}</p>

                                    {/* ‚≠ê Ï¶êÍ≤®Ï∞æÍ∏∞ Î≤ÑÌäº */}
                                    <div className="favorite-icon" onClick={(event) => {
                                        event.stopPropagation(); // ‚úÖ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞©ÏßÄ
                                        toggleFavorite(workBoard.eventNo);
                                    }}>
                                        <img
                                            src={favorites[workBoard.eventNo] ? Goldstar : Graystar}
                                            alt="Ï¶êÍ≤®Ï∞æÍ∏∞"
                                            style={{ width: "20px", height: "20px", cursor: "pointer" }}
                                        />
                                    </div>
                                </div>
                            ))
                        ) : (
                            <p>Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</p> // Í≤∞Í≥ºÍ∞Ä ÏóÜÏùÑ Îïå Î©îÏãúÏßÄ ÌëúÏãú
                        )}
                    </div>

                    {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï∂îÍ∞Ä */}
                    <WorkboardPagination
                        currentPage={currentPage}
                        totalPages={validTotalPages}
                        onPageChange={setCurrentPage}
                    />
                </section>
            </div>
        </div>
    );
}

export default WorkBoard;
