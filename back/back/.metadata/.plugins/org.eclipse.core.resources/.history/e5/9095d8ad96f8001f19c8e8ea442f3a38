package com.example.hansei.security.jwt;

import java.io.IOException;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtAuthorizationFilter extends OncePerRequestFilter {

    private final JwtTokenProvider jwtTokenProvider;

    public JwtAuthorizationFilter(JwtTokenProvider jwtTokenProvider) {
        this.jwtTokenProvider = jwtTokenProvider;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain chain) throws ServletException, IOException {
        
        String token = jwtTokenProvider.resolveToken(request);

        if (token != null && jwtTokenProvider.validateToken(token)) {
            Authentication auth = jwtTokenProvider.getAuthentication("Bearer " + token);

            if (auth != null) {
                SecurityContextHolder.getContext().setAuthentication(auth);
                logger.info("✅ SecurityContext에 인증 정보가 저장되었습니다.");
            } else {
                logger.warn("⚠️ JWT 검증은 성공했지만 인증 정보(auth)는 null입니다.");
            }
        } else {
            logger.warn("⚠️ JWT가 유효하지 않거나 만료되었습니다.");
        }

        chain.doFilter(request, response);
    }

}