package com.example.hansei.recruitmentapi.controller;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.hansei.entity.HanUser;
import com.example.hansei.recruitmentapi.dto.EventDto;
import com.example.hansei.recruitmentapi.repository.EventFavoriteRepository;
import com.example.hansei.recruitmentapi.service.EventFavoriteService;
import com.example.hansei.security.user.CustomUser;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/work-favorites")
@RequiredArgsConstructor
public class EventFavoriteController {

    private final EventFavoriteService eventFavoriteService;
    private final EventFavoriteRepository eventFavoriteRepository;

    // 📌 즐겨찾기 추가
    @PostMapping("/{eventNo}")
    public ResponseEntity<String> addFavorite(@AuthenticationPrincipal CustomUser customUser,
                                              @PathVariable String eventNo) {
        if (customUser == null) {
            return ResponseEntity.status(401).body("인증이 필요합니다.");
        }

        HanUser user = customUser.getUser();
        eventFavoriteService.addFavorite(user.getUserId(), eventNo);

        return ResponseEntity.ok("즐겨찾기에 추가되었습니다.");
    }

    // 📌 즐겨찾기 삭제
    @DeleteMapping("/{eventNo}")
    public ResponseEntity<String> removeFavorite(@AuthenticationPrincipal CustomUser customUser,
                                                 @PathVariable String eventNo) {
        if (customUser == null) {
            return ResponseEntity.status(401).body("인증이 필요합니다.");
        }

        HanUser user = customUser.getUser();
        eventFavoriteService.removeFavorite(user.getUserId(), eventNo);

        return ResponseEntity.ok("즐겨찾기에서 삭제되었습니다.");
    }

    // 📌 사용자의 즐겨찾기 목록 조회
    @GetMapping
    public ResponseEntity<List<String>> getUserFavorites(@AuthenticationPrincipal CustomUser customUser) {
        if (customUser == null) {
            return ResponseEntity.status(401).body(null);
        }

        HanUser user = customUser.getUser();
        List<String> favorites = eventFavoriteService.getUserFavorites(user.getUserId());

        return ResponseEntity.ok(favorites);
    }

        public List<EventDto> getUserFavoriteEvents(Long userId) {
            // 1️⃣ 즐겨찾기한 이벤트 ID 목록 가져오기
            List<String> favoriteEventIds = eventFavoriteRepository.findEventIdsByUserId(userId);

            // 2️⃣ 이벤트 ID를 기반으로 실제 이벤트 정보 조회
            return favoriteEventIds.stream()
                    .map(eventId -> eventRepository.findById(eventId)
                            .map(EventDto::fromEntity) // ⭐ Entity -> DTO 변환
                            .orElse(null)) // 이벤트가 존재하지 않으면 null 반환
                    .filter(Objects::nonNull) // ⭐ null 값 제거
                    .collect(Collectors.toList());
        }
    }

}
